use crate::{math::SamplePoint, NoiseFn};
use std::cell::{Cell, RefCell};

/// Noise function that caches the last output value generated by the source
/// function.
///
/// If the input coordinates passed to `Cache::get` are equal to the previous
/// call, the function returns the cached result of the previous call to
/// `Source::get`. Otherwise, `Source::get` is called with the new coordinates,
/// overwriting the cache with the result, and returning the result to the
/// caller.
///
/// Caching a noise function is useful if it is used as a source function for
/// multiple noise functions. If a source function is not cached, the source
/// function will redundantly calculate the same output value once for each
/// noise function in which it is included.
#[derive(Clone, Debug)]
pub struct Cache<Source, Point: SamplePoint> {
    /// Outputs the value to be cached.
    pub source: Source,

    value: Cell<Option<f64>>,

    point: RefCell<Point>,
}

impl<Source, Point: SamplePoint> Cache<Source, Point> {
    pub fn new(source: Source) -> Self {
        Cache {
            source,
            value: Cell::new(None),
            point: RefCell::new(Point::zero()),
        }
    }
}

impl<Source, P: SamplePoint + PartialEq + Clone> NoiseFn<P> for Cache<Source, P>
where
    Source: NoiseFn<P>,
{
    fn get(&self, point: P) -> f64 {
        match self.value.get() {
            Some(value) if *self.point.borrow() == point => value,
            Some(_) | None => {
                let value = self.source.get(point.clone());
                self.value.set(Some(value));

                let mut cached_point = self.point.borrow_mut();
                *cached_point = point;

                value
            }
        }
    }
}

fn quick_eq(a: &[f64], b: &[f64]) -> bool {
    assert_eq!(a.len(), b.len());

    a.iter().eq(b)
}
